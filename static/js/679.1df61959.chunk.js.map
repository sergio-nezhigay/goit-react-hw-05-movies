{"version":3,"file":"static/js/679.1df61959.chunk.js","mappings":"gRAOe,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAgCF,EAAAA,EAAAA,WAAS,GAAzC,eAAOG,EAAP,KAAkBC,EAAlB,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,6FACCD,GAAW,GADZ,kBAG6BE,EAAAA,KAH7B,gBAGWC,EAHX,EAGWA,QACRL,EAAUK,GAJb,gDAMGC,QAAQC,IAAI,wBAAyB,KAAMC,SAN9C,yBAQGN,GAAW,GARd,2EAAD,EAWD,GAAE,KAGD,8BACGD,GACC,gDAEA,SAAC,IAAD,CACEF,OAAQA,EACRH,SAAUA,EACVa,MAAO,qBAKhB,C,iJCpCYC,EAAQC,EAAAA,GAAAA,GAAH,gDAGLC,EAAaD,EAAAA,GAAAA,GAAH,+GAOVE,EAAOF,EAAAA,GAAAA,GAAH,kLASJG,GAAYH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,4wB,mBChBP,SAASK,EAAT,GAAiD,IAA5BjB,EAA2B,EAA3BA,OAAQH,EAAmB,EAAnBA,SAAUa,EAAS,EAATA,MACpD,GAA8BX,EAAAA,EAAAA,UAAS,MAAvC,eAAOmB,EAAP,KAAgBC,EAAhB,KAEMC,EAAgB,mCAAG,WAAMC,GAAN,uFACHhB,EAAAA,GAA2BgB,GADxB,QACjBC,EADiB,SAGrBH,EAAW,CAAEG,MAAAA,EAAOD,QAAAA,IAHC,2CAAH,sDAOhBE,EAAmB,WACvBJ,EAAW,KACZ,EAED,OACE,kCACKT,EAAMc,SAAU,SAACb,EAAD,UAAQD,MACxBV,EAAOwB,SACR,SAACV,EAAD,UACGd,EAAOyB,KAAI,SAAAC,GAAK,OACf,eAAmBhB,MAAM,8BAAzB,UACE,UAACK,EAAD,CACEY,GAAE,kBAAaD,EAAME,IACrBC,MAAO,CAAEC,KAAMjC,GACfkC,aAAc,kBAAMX,EAAiBM,EAAME,GAA7B,EACdI,aAAcT,EAJhB,UAMGL,GAAWA,EAAQG,UAAYK,EAAME,IAAMV,EAAQI,OAClD,mBACEZ,MAAOgB,EAAMhB,MACbuB,IAAKf,EAAQI,MACbY,MAAM,eAGRR,EAAMS,cACJ,gBACEF,IAtCE,kCAsCqBP,EAAMS,YAC7BC,IAAKV,EAAMhB,SAIfgB,EAAMS,cAAe,SAACtB,EAAD,UAAaa,EAAMhB,YArBrCgB,EAAME,GADA,QA8B1B,C","sources":["Pages/HomeView/HomeView.jsx","components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx"],"sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport * as theMovieDbAPI from '../../components/api/themoviedbApi';\n\nimport MovieList from 'components/MovieList/MovieList';\n\nexport default function Home() {\n  const location = useLocation();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      try {\n        const { results } = await theMovieDbAPI.fetchTrending();\n        setMovies(results);\n      } catch (error) {\n        console.log('Error fetching images', error.message);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, []);\n\n  return (\n    <>\n      {isLoading ? (\n        <div>Loading movies...</div>\n      ) : (\n        <MovieList\n          movies={movies}\n          location={location}\n          title={'Trending movies'}\n        />\n      )}\n    </>\n  );\n}\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Title = styled.h1`\n  margin-bottom: 20px;\n`;\nexport const MovieTitle = styled.h1`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 32px;\n  margin-top: 32px;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const MovieLink = styled(Link)`\n  font-size: 30px;\n  font-weight: 700;\n  text-decoration: none;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  border-radius: 4px;\n  box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.2);\n  background-color: #ffffffbc;\n  position: relative;\n  display: block;\n  width: 100%;\n  padding-top: 40%; /* 21:9 aspect ratio */\n  z-index: 1;\n  transition: transform 0.3s ease-in-out;\n\n  &:before {\n    content: '';\n    display: block;\n    padding-top: 150%;\n  }\n\n  > iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n  }\n\n  > img {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n  }\n`;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Title, MovieTitle, List, MovieLink } from './MovieList.styled';\nimport * as theMovieDbAPI from '../../components/api/themoviedbApi';\nconst IMAGES_BASE_URL = 'https://image.tmdb.org/t/p/w300';\n\nexport default function MovieList({ movies, location, title }) {\n  const [trailer, setTrailer] = useState(null);\n\n  const handleMovieHover = async movieId => {\n    const video = await theMovieDbAPI.fetchTrailer(movieId);\n    if (video) {\n      setTrailer({ video, movieId });\n    }\n  };\n\n  const handleMovieLeave = () => {\n    setTrailer(null);\n  };\n\n  return (\n    <>\n      {!!title.length && <Title>{title}</Title>}\n      {!!movies.length && (\n        <List>\n          {movies.map(movie => (\n            <li key={movie.id} title=\"Click to read movie details\">\n              <MovieLink\n                to={`/movies/${movie.id}`}\n                state={{ from: location }}\n                onMouseEnter={() => handleMovieHover(movie.id)}\n                onMouseLeave={handleMovieLeave}\n              >\n                {trailer && trailer.movieId === movie.id && trailer.video ? (\n                  <iframe\n                    title={movie.title}\n                    src={trailer.video}\n                    allow=\"autoplay; \"\n                  />\n                ) : (\n                  movie.poster_path && (\n                    <img\n                      src={IMAGES_BASE_URL + movie.poster_path}\n                      alt={movie.title}\n                    />\n                  )\n                )}\n                {!movie.poster_path && <MovieTitle>{movie.title}</MovieTitle>}\n              </MovieLink>\n            </li>\n          ))}\n        </List>\n      )}\n    </>\n  );\n}\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n    })\n  ).isRequired,\n  location: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n};\n"],"names":["Home","location","useLocation","useState","movies","setMovies","isLoading","setLoading","useEffect","theMovieDbAPI","results","console","log","message","title","Title","styled","MovieTitle","List","MovieLink","Link","MovieList","trailer","setTrailer","handleMovieHover","movieId","video","handleMovieLeave","length","map","movie","to","id","state","from","onMouseEnter","onMouseLeave","src","allow","poster_path","alt"],"sourceRoot":""}