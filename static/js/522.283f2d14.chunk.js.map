{"version":3,"file":"static/js/522.283f2d14.chunk.js","mappings":"wRAGaA,EAAMC,EAAAA,GAAAA,IAAH,gFAKHC,EAASD,EAAAA,GAAAA,IAAH,uGAONE,GAAWF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,0RAeRI,EAAUJ,EAAAA,GAAAA,GAAH,qL,mBCrBL,SAASK,IAAoB,IAAD,IACnCC,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KACnDC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,WAAS,GAAzC,eAAOG,EAAP,KAAkBC,EAAlB,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,2FACCD,GAAW,GADZ,kBAG2BE,EAAAA,GAA2BR,GAHtD,OAGSS,EAHT,OAIGL,EAASK,GAJZ,gDAMGC,QAAQC,IAAI,wBAAyB,KAAMC,SAN9C,yBAQGN,GAAW,GARd,2EAAD,EAWD,GAAE,CAACN,KAGF,iCACE,SAACV,EAAD,CAAUuB,GAAIjB,EAAoBkB,QAAlC,4BACCT,GACC,mDAEA,8BACGF,IACC,iCACE,UAAChB,EAAD,WACGgB,EAAMY,cACL,gBACEC,IAnCI,mCAmCmBb,EAAMY,YAC7BE,IAAKd,EAAMe,SAGf,UAAC7B,EAAD,YACE,wBAAKc,EAAMe,UACRf,EAAMgB,eACP,yCAAiBC,KAAKC,MAA2B,GAArBlB,EAAMgB,cAAlC,QAEF,sCACA,uBAAIhB,EAAMmB,aACPnB,EAAMoB,OAAOC,SACd,iCACE,oCACA,uBAAIrB,EAAMoB,OAAOE,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,iBAKvD,UAACvC,EAAD,YACE,SAACG,EAAD,KAEA,oDACA,2BACE,yBACE,SAAC,KAAD,CAAMqB,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAGJ,SAACrB,EAAD,KACA,SAAC,EAAAqC,SAAD,CAAUC,UAAU,gDAApB,UACE,SAAC,KAAD,gBASjB,C","sources":["Pages/MovieDetailsView/MovieDetails.styled.jsx","Pages/MovieDetailsView/MovieDetailsView.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const Row = styled.div`\n  display: flex;\n  gap: 20px;\n  margin-bottom: 20px;\n`;\nexport const Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  padding: 16px 0;\n`;\n\nexport const BackLink = styled(Link)`\n  display: inline-block;\n  padding: 10px 20px;\n  border-radius: 5px;\n  background-color: #1e90ff;\n  color: #fff;\n  font-size: 16px;\n  margin-bottom: 20px;\n  text-decoration: none;\n  cursor: pointer;\n  &:hover {\n    background-color: #3b77d8;\n  }\n`;\n\nexport const Divider = styled.hr`\n  width: 100%;\n  border: 0;\n  height: 1px;\n  background: #333;\n  background-image: linear-gradient(to right, #ccc, #333, #ccc);\n  margin-bottom: 16px;\n`;\n","import { Link, Outlet } from 'react-router-dom';\nimport { useState, useEffect, Suspense, useRef } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\n\nimport { Row, Column, BackLink, Divider } from './MovieDetails.styled';\n\nimport * as theMovieDbAPI from '../../components/api/themoviedbApi';\nconst IMAGES_BASE_URL = 'https://image.tmdb.org/t/p/w200/';\n\nexport default function MovieDetailsView() {\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/');\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      try {\n        const movieData = await theMovieDbAPI.fetchDetails(movieId);\n        setMovie(movieData);\n      } catch (error) {\n        console.log('Error fetching images', error.message);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [movieId]);\n\n  return (\n    <>\n      <BackLink to={backLinkLocationRef.current}>&#x2190; Go back</BackLink>\n      {isLoading ? (\n        <div>Loading the movie...</div>\n      ) : (\n        <>\n          {movie && (\n            <>\n              <Row>\n                {movie.poster_path && (\n                  <img\n                    src={IMAGES_BASE_URL + movie.poster_path}\n                    alt={movie.title}\n                  />\n                )}\n                <Column>\n                  <h2>{movie.title}</h2>\n                  {!!movie.vote_average && (\n                    <p>Users score: {Math.round(movie.vote_average * 10)}%</p>\n                  )}\n                  <h3>Overview</h3>\n                  <p>{movie.overview}</p>\n                  {!!movie.genres.length && (\n                    <>\n                      <h3>Genres</h3>\n                      <p>{movie.genres.map(genre => genre.name).join(' ')}</p>\n                    </>\n                  )}\n                </Column>\n              </Row>\n              <Column>\n                <Divider />\n\n                <h3>Additional information</h3>\n                <ul>\n                  <li>\n                    <Link to=\"cast\">Cast</Link>\n                  </li>\n                  <li>\n                    <Link to=\"reviews\">Reviews</Link>\n                  </li>\n                </ul>\n                <Divider />\n                <Suspense fallback={<div>Loading subpage...</div>}>\n                  <Outlet />\n                </Suspense>\n              </Column>\n            </>\n          )}\n        </>\n      )}\n    </>\n  );\n}\n"],"names":["Row","styled","Column","BackLink","Link","Divider","MovieDetailsView","location","useLocation","backLinkLocationRef","useRef","state","from","movieId","useParams","useState","movie","setMovie","isLoading","setLoading","useEffect","theMovieDbAPI","movieData","console","log","message","to","current","poster_path","src","alt","title","vote_average","Math","round","overview","genres","length","map","genre","name","join","Suspense","fallback"],"sourceRoot":""}